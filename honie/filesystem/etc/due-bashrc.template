# Copyright 2019,2020 Cumulus Networks, Inc.  All rights reserved.
#
#  SPDX-License-Identifier:     MIT

# anything to add to a user's bashrc

if [ "REPLACE_ENABLE_DUE_BASHRC" = "TRUE" ];then
   # Set prompt to print git branch of current directory
   parse_git_branch() {
   # Exit early if git is not installed
   if [ -e /usr/bin/git ];then
      git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ \[\1\]/'
   fi
   }


   # Supply D- to indicate Docker container. 
   # The --prompt option will set REPLACE_PROMPT
   if [[ $PS1 != *D-DUE_REPLACE_PROMPT* ]];then
       export PS1='D-DUE_REPLACE_PROMPT:\u@$(parse_git_branch)$ '
   fi
fi

#
# Force the user path to start with sbin so
# certain tools will be found.
#
if [[ $PATH != */usr/sbin* ]];then
   PATH="/sbin:/usr/sbin:$PATH"
fi

# add the PKCS11 OpenSSL configuration to the environment
export OPENSSL_CONF="/etc/openssl-pkcs11-engine.conf"

# and we are assuming that if a YubiHSM is used
# its configuration will be available here.
# This must be mounted in on 
export YUBIHSM_PKCS11_CONF=/etc/yubihsm/yubihsm_pkcs11.conf

# TODO: find a better solution for this: there are some cases when the user is bumped to /
if [ "$HOME" = "/" ] ; then
   export HOME=$(mktemp -d)
fi

# create and setup the GPG folder by default if it does not exist yet
# this setup is so wonky, I doubt we can adopt this into the gpg-sign.sh script
# TODO: maybe initialize in a separate folder with the gpg --homedir flag?
if [ ! -d $HOME/.gnupg ] ; then
   GNUPG_DIR="$HOME/.gnupg"
   mkdir $HOME/.gnupg
   chmod 700 $GNUPG_DIR
   cp /etc/gpg-agent.conf $GNUPG_DIR/gpg-agent.conf
   # TODO: initialize private key stub
   # TODO: import associated public keys (could be done somewhere else)
fi
