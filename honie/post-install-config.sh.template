#!/bin/bash
# Script to run configuration inside the docker container.
# After package install has happened.
# DUE_VERSION_COMPATIBILITY_TRACKING=1.0.0

set -e
# Copyright 2019,2020 Cumulus Networks, Inc.  All rights reserved.
#
#  SPDX-License-Identifier:     MIT

# NOTE: there are configuration differences between Debian 8 and 9.
#  Expect similar issues if using Ubuntu.

. /due-configuration/install-config-common.lib


# Add any additional sources.list files, like stretch-backports
fxnInstallSourcesList

# The default post install operations exist as a function
# for easy invocation (or not) in overriding scripts.
fxnPostInstallCommon


# Detect expired releases
if [[ $NAME = *Debian* ]];then
    # Useful for old distributions that throw expired key errors.
    # Though key update can be forced with: sudo apt-key adv --recv-keys
    # Debian 8 Jessie is the first of these tested.
    # NOTE:  --force-yes can apply the following:
    #  --allow-unauthenticated
    #  --allow-downgrades
    #  --allow-remove-essential
    # --allow-change-held-packages

    # VERSION_ID and VERSION variables are sourced from /etc/os-release
    if [ $((VERSION_ID < 9 )) = 1 ];then
        APT_FAKE_TIME=" faketime "
        APT_FORCE_YES=" --force-yes "

        # Pretend to be an earlier date so keys are not yet expired.
        APT_FAKE_DATE="2018-01-01"
        # Ex: sudo faketime '2018-01-01 00:00:01' apt-get update

        # I suspect additional fake times will have to be
        # added.
        case $VERSION_ID in
            '8' )
                APT_FAKE_DATE="2018-01-01"
                ;;
            * )
                echo "ERROR! $0 Failed to set fake time for $VERSION. Exiting."
                exit 1
                ;;

        esac
        echo ""
        echo "WARNING: detected expired release $NAME $VERSION_ID "
        echo " APT install will use faketime and --force-yes in $0"
        echo ""
    fi
fi


#
# Container specific configuration
#
# Add an ONIE specific build account
USER_NAME=oniebuild

# Put the user ID high enough to be unique, but not to conflict
USER_ID=2201

# Check based on directory
if [ -d /home/$USER_NAME ];then
    echo "User [ $USER_NAME ] exists. Continuing."
else
    echo "Adding user [ $USER_NAME ] with UID [ $USER_ID ] to the container."

    adduser --home /home/$USER_NAME \
            --shell /bin/bash \
            --uid $USER_ID \
            --gecos "" \
            --disabled-password $USER_NAME > /dev/null || exit 1

    echo "Adding sudo ability for $USER_NAME"
    adduser $USER_NAME sudo > /dev/null || exit 1

    echo "Adding sudo without password."
    echo "$USER_NAME       ALL=(ALL:ALL) NOPASSWD: ALL" >> /etc/sudoers


    #
    # make sure directory is owned by user
    #
    chown $USER_NAME /home/$USER_NAME/.bashrc
fi


# If you expect to do development in the container, these are useful.
EDITORS="vim emacs-nox magit"

# if this is a Debian 8 container, this isn't easily available.
DEBIAN_RELEASE=$( grep "Debian GNU/Linux" /etc/issue | awk '{print$3}')

#
# Note - only Debian releases are supported, not Ubuntu or anything else, yet.
#
case $DEBIAN_RELEASE in
    "11" )
	# HONIE - we only stick with Debian 11
        DEBIAN_VERSION_PACKAGES="sbsigntool unzip tree python3.9-dev python3-distutils libelf-dev ispell jq "

        # Packages used for secure boot (amd64 hard code is fine as this is Intel only)
        #linux-headers-amd64?
        SECURE_BOOT=" qemu-utils ovmf gnu-efi libfile-slurp-perl grub-common psmisc monkeysphere "
		SPHINX_NAME=" python3-sphinx"		
        ;;

    * )
        echo "ERROR! Failed to get ONIE Debian release type. Exiting."
        exit 1
        ;;
esac
#
# apt-get install development packages
# Note at this stage, any changes to the container's sources.list
# will have happened.
#

# Note: packages after xorriso are optional, but convenient to have.
set -x
$APT_FAKE_TIME $APT_FAKE_DATE  apt-get update


DEBIAN_FRONTEND=noninteractive \
               $APT_FAKE_TIME $APT_FAKE_DATE \
               apt-get install \
               --assume-yes \
               --no-install-recommends \
               openssh-server \
               sudo \
               autoconf \
               automake \
               bc \
               bison \
               bsdmainutils \
               build-essential \
               ca-certificates \
               cpio \
               curl \
               device-tree-compiler \
               dosfstools \
               fakeroot \
               flex \
               gawk \
               git \
               gperf \
               gnupg2 \
               help2man \
               libefivar-dev \
               libexpat1 \
               libexpat1-dev \
               libfreetype6-dev \
               libncurses5 \
               libncurses5-dev \
               libnss3-dev \
               libnss3-tools \
               libpopt-dev \
               libssl-dev \
               libtool \
               libtool-bin \
               mtools \
               pkg-config \
               openssl \
               psmisc \
               python-all-dev \
               rst2pdf \
               rsync \
               stgit \
               texinfo \
               u-boot-tools \
               util-linux \
               uuid-dev \
               uuid-runtime \
               wget \
               x11-xkb-utils \
               equivs \
               xorriso \
               vim \
               telnet \
               tmux \
               tree \
               $DEBIAN_VERSION_PACKAGES \
               $EDITORS \
               $SECURE_BOOT \
               locales-all || exit 1


#
# Do Git configuration now that git has been installed.
#
#
# Supply a default .gitconfig
#

cat <<EOF > /home/$USER_NAME/.gitconfig
[user]
        name = ONIE build account
        email = oniebuild@localhost
[push]
        default = simple
EOF
chown $USER_NAME /home/$USER_NAME/.gitconfig

cd /home/$USER_NAME


# Set some basic git configuration to keep things from failing.
# Being a professional, these will, of course be updated at build time...
git config --global user.name "ONIE build account"
git config --global user.email "oniebuild@localhost"

# Default to only upload current branch on push
#git config push.default simple


#
# Sphinx is really only needed for updating ONIE documentation
# Only pull it in on Debian containers, as that is
# 'official build environment'. Let other distributions build
# without it ( or change the initial check below to include it.
set -x
if [ "$DEBIAN_RELEASE" != "" ];then
    if [ "$DEBIAN_RELEASE" = "8" ];then
        echo "Not installing $SPHINX_NAME You'll have to get creative."
    else

        if [ "$DEBIAN_RELEASE" = "9" ];then
            echo "Installing backports versions of sphinx packages"
            SPHINX_STRETCH_BACKPORTS=" -t stretch-backports "
        fi

        # Get it
        DEBIAN_FRONTEND=noninteractive \
                       $APT_FAKE_TIME $APT_FAKE_DATE \
                       apt-get install \
                       --assume-yes \
                       --no-install-recommends \
                       $SPHINX_STRETCH_BACKPORTS \
                       sphinx-common \
                       $SPHINX_NAME \
                       libjs-sphinxdoc
    fi
fi

#
# Hub (https://github.com/github/hub) is not needed for build, but is handy for
# managing pull requests.
# Installing it here keeps the container the same for everyone using it.
# Note: this assumes a 64bit AMD64 container
#

HUB_VERSION="2.12.8"
HUB_URL="https://github.com/github/hub/releases/download/v${HUB_VERSION}/hub-linux-amd64-${HUB_VERSION}.tgz"

echo "Installing optional package 'hub' version $HUB_VERSION as a GitHub utility in /usr/local/bin."
echo "curl --remote-name --remote-header-name --location $HUB_URL"
# This was wget instead of curl until wget developed an issue with redirects
# where it would rapidly loop and then exceed the --max-redirect.
# Curl gets it on the first try.
curl --remote-name --remote-header-name --location $HUB_URL || exit 1
tar -xvf hub-linux-amd64-${HUB_VERSION}.tgz                 || exit 1
cp hub-linux-amd64-${HUB_VERSION}/bin/hub /usr/local/bin    || exit 1

echo "Cleaning up download of hub."
rm -rf hub-linux-amd64-${HUB_VERSION}*

#
# Efi tools. Available in Debian Buster, but not earlier.
#
if [ "$SECURE_BOOT" != "" ];then

    EFI_TOOLS_VERSION="1.9.2"
    EFI_TOOLS_URL="https://git.kernel.org/pub/scm/linux/kernel/git/jejb/efitools.git/snapshot/efitools-${EFI_TOOLS_VERSION}.tar.gz"
    echo "Downloading efi tools."
    wget $EFI_TOOLS_URL || exit 1
    tar -xvf efitools-${EFI_TOOLS_VERSION}.tar.gz || exit 1
    cd efitools-${EFI_TOOLS_VERSION}
    echo "Building efi tools"
    make || exit 1
    echo "Installing *efi in /usr/local/bin"
    sudo make install || exit 1
    cd
fi

# HONIE additions
# it's horrible debugging a build without these two
apt-get install -y --no-install-recommends less vim strace

# general PKCS11 access utilities that will work with OpenSSL engine
apt-get install -y --no-install-recommends libengine-pkcs11-openssl p11-kit p11-kit-modules

# not a requirement but useful for debugging
apt-get install -y --no-install-recommends opensc-pkcs11 opensc

# yubihsm: ultimately we need PKCS11 for access to our YubiHSMs
# we need this for kernel building and adding our cert to the kernel
# as well as signing of kernel images for secure boot support
YUBIHSM_SHELL_URL="https://developers.yubico.com/yubihsm-shell/Releases/yubihsm-shell-2.4.0-debian11-amd64.tar.gz"
wget $YUBIHSM_SHELL_URL || exit 1
tar xvf yubihsm-shell-2.4.0-debian11-amd64.tar.gz
cd yubihsm-shell
apt-get install -y -f ./libyubihsm-usb1_2.4.0_amd64.deb
apt-get install -y -f ./libyubihsm-http1_2.4.0_amd64.deb
apt-get install -y -f ./libyubihsm1_2.4.0_amd64.deb
apt-get install -y -f ./libyubihsm-dev_2.4.0_amd64.deb
apt-get install -y -f ./libykhsmauth1_2.4.0_amd64.deb
apt-get install -y -f ./yubihsm-pkcs11_2.4.0_amd64.deb
apt-get install -y -f ./yubihsm-auth_2.4.0_amd64.deb
apt-get install -y -f ./yubihsm-shell_2.4.0_amd64.deb
apt-get install -y -f ./yubihsm-wrap_2.4.0_amd64.deb

# write out OpenSSL configuration file
cat > /etc/openssl-pkcs11-engine.conf <<EOF
openssl_conf = openssl_init

[openssl_init]
engines = engine_section

[engine_section]
pkcs11 = pkcs11_section

[pkcs11_section]
engine_id = pkcs11
# not necessary, if it is, it is most likely at here
#dynamic_path = /usr/lib/x86_64-linux-gnu/engines-1.1/pkcs11.so
MODULE_PATH = /usr/lib/x86_64-linux-gnu/pkcs11/yubihsm_pkcs11.so
EOF

# Unfortunately Debian 11 does not want to "backport" the latest OpenSSL patch release
# However, it contains a necessary bug fix for dynamic engine.
# Essentially, this commit is missing: https://github.com/openssl/openssl/commit/d6bf4a2218aeb246ba7d34f02e895c37569c8265
# We need to ensure to fix this. Only copying the libcrypto.so.1.1 would already be enough for this to work in theory.
wget https://www.openssl.org/source/openssl-1.1.1t.tar.gz
tar xf openssl-1.1.1t.tar.gz
cd openssl-1.1.1t
./config --prefix=/usr --openssldir=/etc/ssl --libdir=/usr/lib/x86_64-linux-gnu
make
make install
cd

# to be able to PGP sign the grub files for SECURE_GRUB support
# we need to bring in gnupg-pkcs11-scd to support that with our HSM
# unfortunately, we have to compile it, as the Debian shipped version 0.9.2 didn't work
# as we also tested with a newer gpg, let's just use that version as well
apt-get install -y --no-install-recommends \
    libgpg-error0 libgpg-error-dev \
    libksba-dev libksba8 \
    libassuan0 libassuan-dev \
    libgcrypt20 libgcrypt20-dev \
    libpkcs11-helper1 libpkcs11-helper1-dev \
    libnpth0 libnpth0-dev

wget https://gnupg.org/ftp/gcrypt/gnupg/gnupg-2.2.41.tar.bz2
tar xf gnupg-2.2.41.tar.bz2
cd gnupg-2.2.41
./configure --prefix=/usr --sysconfdir=/etc --libdir=/usr/lib/x86_64-linux-gnu
make
make install
cd

wget https://github.com/alonbl/gnupg-pkcs11-scd/releases/download/gnupg-pkcs11-scd-0.10.0/gnupg-pkcs11-scd-0.10.0.tar.bz2
tar xf gnupg-pkcs11-scd-0.10.0.tar.bz2
cd gnupg-pkcs11-scd-0.10.0
./configure --prefix=/usr --sysconfdir=/etc --libdir=/usr/lib/x86_64-linux-gnu
make
make install
cd

sudo cat > /etc/gnupg-pkcs11-scd.conf <<EOF
providers yubihsm
provider-yubihsm-library /usr/lib/x86_64-linux-gnu/pkcs11/yubihsm_pkcs11.so
provider-yubihsm-cert-private
provider-yubihsm-private-mask 1
provider-yubihsm-allow-protected-auth

# private-mask
#    Private key mask mode. Use this only when you have problem using private key operations. The value is hex encoded mask number.
#    0        Determine automatically.
#    1        Force sign.
#    2        Force sign with recovery.
#    4        Force decrypt.
#    8        Force decrypt with unwrap.

# Log file.
#log-file log1

# Default is not verbose.
#verbose

# Default is no debugging.
#debug-all

# Pin cache period in seconds; default is infinite.
#pin-cache 20
EOF

echo "Done $0"
